

// *********************************************************************
//  Test software for Analyzer
// *********************************************************************

#include <ArduinoSTL.h>
using namespace std;
#include <LiquidCrystal_I2C.h>

class LCD_Helper
{
  public:
    std::string line[4];
    LiquidCrystal_I2C lcd;
    LCD_Helper(): lcd(0x25, 40, 2)
    {
      pinMode(8, OUTPUT);  // disp line select
      digitalWrite(8, HIGH);   // disp line
      lcd.init();              // initialize the LCD
      lcd.setBacklight(HIGH);  // SET LCD LYS ON / OFF
      lcd.clear();             // clear Display
    };

    Show()
    {
      digitalWrite(8, HIGH);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(line[0].c_str());
      lcd.setCursor(0, 1);
      lcd.print(line[1].c_str());

      digitalWrite(8, LOW);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(line[2].c_str());
      lcd.setCursor(0, 1);
      lcd.print(line[3].c_str());
    };
};

void splashscreen()
{
  LCD_Helper lcdhelper;

  lcdhelper.line[0] = "         Test Tape Generator";
  lcdhelper.line[1] = "  SW rev: 2022/01/02";
  lcdhelper.line[2] = "TapeList: 2022/01/02";
  lcdhelper.Show();
  delay(2000);
}

void selftest()
{
  LCD_Helper lcdhelper;

  lcdhelper.line[0] = "I2C test: OK";
  lcdhelper.Show();
  delay(750);

  lcdhelper.line[1] = "RTC:OK EEPROM:OK ATT:OK DISP:OK";
  lcdhelper.Show();
  delay(750);

  lcdhelper.line[2] = "Frequncy response test:";
  lcdhelper.line[3] = "20Hz to 25Khz +/- 0.1 dB :OK";
  lcdhelper.Show();
  delay(1000);
}

/*
class RecordStep
{
  public:
    uint64_t Frequency;
    uint64_t Time;
    int64_t  Level;
    std::string *Comment;
    RecordStep(uint64_t Frequency_, uint64_t Time_, int64_t Level_, const char* Comment_): Frequency(Frequency_), Time(Time_), Level(Level_), Comment(new std::string(Comment_))
    {
    }
    RecordStep(uint64_t Frequency_, uint64_t Time_, int64_t Level_): Frequency(Frequency_), Time(Time_), Level(Level_), Comment(0)
    {
    }
    ~RecordStep()
    {
      delete Comment;
    }

    std::string ToString ()
    {
      char stringbuffer[40];
      sprintf(stringbuffer, "%5i Hz %4i dB %4i Sec", Frequency, Level, Time);
      return stringbuffer;
    }

};

class TapeInfo
{
  public:
    enum TapeFormat {Cassette = 'Cassette', Reel = 'Reel'};
    std::string Description;
    uint16_t Tracks;
    uint16_t Length;
    uint16_t Flux;
    TapeFormat Format;
    double Target;
    std::vector<RecordStep> RecordSteps;

    TapeInfo(
      const char * Description_,
      uint16_t Tracks_,
      uint16_t Flux_,
      TapeFormat Format_,
      double Target_
      //      std::vector<RecordStep> RecordSteps_) : Description(Description_), Tracks(Tracks_), Flux(Flux_), Format(Format_), Target(Target_), RecordSteps(RecordSteps_)
    ) : Description(Description_), Tracks(Tracks_), Flux(Flux_), Format(Format_), Target(Target_)
    {
      //
      //  std::vector<RecordStep>::iterator ptr;
      //  Length = 0;
      //  for (ptr = RecordSteps.begin(); ptr < RecordSteps.end(); ptr++) {
      //    Length += ptr->Time;/
      //  }
    }

    std::vector<std::string> ToString ()
    {
      std::vector<std::string> Result(2);
      char stringbuffer[40];
      sprintf(stringbuffer, "%s", Description);
      Result[0] = stringbuffer;
      sprintf(stringbuffer, "%i Track - %i Tracks - %i Min - %i nW/m - %s", Tracks, RecordSteps.size(), (Length % 60) ? Length / 60 + 1 : Length / 60, Flux, Format);
      Result[1] = stringbuffer;
      return Result;
    }
};
*/

/*

std::vector<TapeInfo> TapeList = {
  ////////////////////////////////////////////////////////////////////////
  TapeInfo('Wow & Flutter Test Tape', 2, 257, TapeInfo::Reel, 0.0)
};
  ////////////////////////////////////////////////////////////////////////
        TapeInfo('Wow & Flutter Test Tape', 2, 257, TapeInfo::Reel, 0.0, {
            RecordStep(3000, 120, 0, 'DIN Standard'),
            RecordStep(3150, 120, 0, 'JIS Standard')}),
  ////////////////////////////////////////////////////////////////////////
        TapeInfo('Revox B-77 Test Tape', 2, 257, TapeInfo::Reel, 0.0, {
            RecordStep(1000, 120, 0, 'Level'),
            RecordStep(1000, 60, -20, 'Azimuth'),
            RecordStep(10000, 120, -20, 'Azimuth'),
            RecordStep(10000, 120, 0, 'Azimuth')}),
  ////////////////////////////////////////////////////////////////////////
        TapeInfo('Revox B-77 Test Tape', 4, 257, TapeInfo::Reel, -5.0, {
            RecordStep(1000, 120, 0, 'Level'),
            RecordStep(1000, 60, -20, 'Azimuth'),
            RecordStep(10000, 120, -20, 'Azimuth'),
            RecordStep(10000, 120, 0, 'Azimuth')})
  };
*/


/*
  [TapeInfo[]]$TapeList = @(
    #################################################################
    [TapeInfo]::new('Revox B-77 Test Tape', 2, 257, 'Reeltape', 0.0, @(
            [RecordStep]::new(1000, 120, 0, 'Level'),
            [RecordStep]::new(1000, 60, -20, 'Azimuth'),
            [RecordStep]::new(10000, 120, -20, 'Azimuth'),
            [RecordStep]::new(10000, 120, 0, 'Azimuth'))),
    #################################################################
    [TapeInfo]::new('Revox B-77 Test Tape', 4, 257, 'Reeltape', -5.0, @(
            [RecordStep]::new(1000, 120, 0, 'Level'),
            [RecordStep]::new(1000, 60, -20, 'Azimuth'),
            [RecordStep]::new(10000, 120, -20, 'Azimuth'),
            [RecordStep]::new(10000, 120, 0, 'Azimuth'))),
    #################################################################
    [TapeInfo]::new('Universal Test Tape', 2, 200, 'Cassette', 0.0, @(
            [RecordStep]::new(1000, 120, 0, 'Level'),
            [RecordStep]::new(31.5, 60, 0, 'Azimuth'),
            [RecordStep]::new(31.5, 60, -3),
            [RecordStep]::new(31.5, 60, -6),
            [RecordStep]::new(31.5, 60, -10),
            [RecordStep]::new(31.5, 60, -15),
            [RecordStep]::new(31.5, 60, -20),
            [RecordStep]::new(63, 60, 0),
            [RecordStep]::new(63, 60, -3),
            [RecordStep]::new(63, 60, -6),
            [RecordStep]::new(63, 60, -10),
            [RecordStep]::new(63, 60, -15),
            [RecordStep]::new(63, 60, -20),
            [RecordStep]::new(125, 60, 0),
            [RecordStep]::new(125, 60, -3),
            [RecordStep]::new(125, 60, -6),
            [RecordStep]::new(125, 60, -10),
            [RecordStep]::new(125, 60, -15),
            [RecordStep]::new(125, 60, -20),
            [RecordStep]::new(250, 60, 0),
            [RecordStep]::new(250, 60, -3),
            [RecordStep]::new(250, 60, -6),
            [RecordStep]::new(250, 60, -10),
            [RecordStep]::new(250, 60, -15),
            [RecordStep]::new(250, 60, -20),
            [RecordStep]::new(500, 60, 0),
            [RecordStep]::new(500, 60, -3),
            [RecordStep]::new(500, 60, -6),
            [RecordStep]::new(500, 60, -10),
            [RecordStep]::new(500, 60, -15),
            [RecordStep]::new(500, 60, -20),
            [RecordStep]::new(1000, 60, 0),
            [RecordStep]::new(1000, 60, -3),
            [RecordStep]::new(1000, 60, -6),
            [RecordStep]::new(1000, 60, -10),
            [RecordStep]::new(1000, 60, -15),
            [RecordStep]::new(1000, 60, -20),
            [RecordStep]::new(2000, 60, 0),
            [RecordStep]::new(2000, 60, -3),
            [RecordStep]::new(2000, 60, -6),
            [RecordStep]::new(2000, 60, -10),
            [RecordStep]::new(2000, 60, -15),
            [RecordStep]::new(2000, 60, -20),
            [RecordStep]::new(4000, 60, 0),
            [RecordStep]::new(4000, 60, -3),
            [RecordStep]::new(4000, 60, -6),
            [RecordStep]::new(4000, 60, -10),
            [RecordStep]::new(4000, 60, -15),
            [RecordStep]::new(4000, 60, -20),
            [RecordStep]::new(6300, 60, 0),
            [RecordStep]::new(6300, 60, -3),
            [RecordStep]::new(6300, 60, -6),
            [RecordStep]::new(6300, 60, -10),
            [RecordStep]::new(6300, 60, -15),
            [RecordStep]::new(6300, 60, -20),
            [RecordStep]::new(8000, 60, 0),
            [RecordStep]::new(8000, 60, -3),
            [RecordStep]::new(8000, 60, -6),
            [RecordStep]::new(8000, 60, -10),
            [RecordStep]::new(8000, 60, -15),
            [RecordStep]::new(8000, 60, -20),
            [RecordStep]::new(10000, 60, -10),
            [RecordStep]::new(10000, 60, -15),
            [RecordStep]::new(10000, 60, -20),
            [RecordStep]::new(12500, 60, -10),
            [RecordStep]::new(12500, 60, -15),
            [RecordStep]::new(12500, 60, -20),
            [RecordStep]::new(15000, 60, -10),
            [RecordStep]::new(15000, 60, -15),
            [RecordStep]::new(15000, 60, -20),
            [RecordStep]::new(1000, 120, 0))),
    #################################################################
    [TapeInfo]::new('Wow & Flutter Test Tape', 2, 257, 'Reeltape', 0.0, @(
            [RecordStep]::new(3000, 120, 0, 'DIN Standard'),
            [RecordStep]::new(3150, 120, 0, 'JIS Standard'))),
    #################################################################
    [TapeInfo]::new('Wow & Flutter Test Tape', 4, 257, 'Reeltape', 0.0, @(
            [RecordStep]::new(3000, 120, 0, 'DIN Standard'),
            [RecordStep]::new(3150, 120, 0, 'JIS Standard'))),
    #################################################################
    [TapeInfo]::new('Wow & Flutter Test Tape', 4, 185, 'Reeltape', -5.0, @(
            [RecordStep]::new(3000, 120, 0, 'DIN Standard'),
            [RecordStep]::new(3150, 120, 0, 'JIS Standard'))),
    #################################################################
    [TapeInfo]::new('AKAI GX-75 / 95 Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(315, 180, 0, 'Level'),
            [RecordStep]::new(1000, 180, 0, 'Azimuth'),
            [RecordStep]::new(3150, 180, 0),
            [RecordStep]::new(10000, 180, -15))),
    #################################################################
    [TapeInfo]::new('Nakamichi Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(20000, 180, -20, 'DA09001A 20 kHz Frequency Response'),
            [RecordStep]::new(15000, 180, -20, 'DA09002A 15 kHz Frequency Response'),
            [RecordStep]::new(10000, 180, -20, 'DA09003A 10 kHz Frequency Response'),
            [RecordStep]::new(15000, 180, 0, 'DA09004A 15 kHz Azimuth'),
            [RecordStep]::new(400, 180, -10, 'DA09005A 400 Hz Playback Level'),
            [RecordStep]::new(3000, 180, 0, 'DA09006A 3 kHz Speed and Wow & Flutter'))),
    #################################################################
    [TapeInfo]::new('Revox B-215 Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(1000, 180, + 2),
            [RecordStep]::new(1000, 180, 0),
            [RecordStep]::new(3150, 180, 0),
            [RecordStep]::new(10000, 180, -20),
            [RecordStep]::new(16000, 180, -20))),
    #################################################################
    [TapeInfo]::new('Wow & Flutter Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(3000, 480, 0, 'DIN Standard'),
            [RecordStep]::new(3150, 480, 0, 'JIS standard'))),
    #################################################################
    [TapeInfo]::new('Panasonic QZZCFM Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(315, 180, -2, 'Level'),
            [RecordStep]::new(3000, 180, -10, 'Azimuth'),
            [RecordStep]::new(8000, 180, -20),
            [RecordStep]::new(63, 20, -20),
            [RecordStep]::new(125, 20, -20),
            [RecordStep]::new(250, 20, -20),
            [RecordStep]::new(1000, 20, -20),
            [RecordStep]::new(2000, 20, -20),
            [RecordStep]::new(8000, 20, -20),
            [RecordStep]::new(10000, 20, -20),
            [RecordStep]::new(12500, 20, -20))),
    #################################################################
    [TapeInfo]::new('Studer A710 Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(315, 460, 0, 'Level'),
            [RecordStep]::new(10000, 460, -20, 'Azimuth'))),
    #################################################################
    [TapeInfo]::new('Tandberg nr 24 Test Tape', 2, 250, 'Cassette', 0, @(
            [RecordStep]::new(1000, 4800, + 2, 'Flux: 250nW/m'))),
    #################################################################
    [TapeInfo]::new('Playback EQ Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(1000, 120, 0, '1 kHz Reference Level'),
            [RecordStep]::new(10000, 5, -20, 'Alternating 1kHz/10kHz'),
            [RecordStep]::new(1000, 5, -20, 'Azimuth'),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 5, -20),
            [RecordStep]::new(1000, 5, -20),
            [RecordStep]::new(10000, 120, -20))),
    #################################################################
    [TapeInfo]::new('TEAC MTT - Multi Test Tape', 2, 200, 'Cassette', 0, @(
            [RecordStep]::new(315, 120, 0, 'MTT-212N'),
            [RecordStep]::new(315, 120, -4, 'MTT-212CN')
            [RecordStep]::new(1000, 120, -4, 'MTT-212EN')
            [RecordStep]::new(1000, 120, -10, 'MTT-118N')
            [RecordStep]::new(3000, 120, -10, 'MTT-111N')
            [RecordStep]::new(6300, 120, -10, 'MTT-113N')
            [RecordStep]::new(8000, 120, -10, 'MTT-113CN')
            [RecordStep]::new(10000, 120, -10, 'MTT-114N')
            [RecordStep]::new(12500, 120, -24, 'MTT-118NA')))
*/
/*
void printTapeList()
{
  LCD_Helper lcdhelper;

  char stringbuffer[40];
  sprintf(stringbuffer, "TapeInfos %i", TapeList.size());
  lcdhelper.line[0] = stringbuffer;
  lcdhelper.Show();
  delay(2000);
}
*/
void setup() {
  Serial.begin(115200);    // start serial com p� 115200 Baud

  splashscreen();   // KALD SPLACHSCREEN
  selftest();
//  printTapeList();

}

void loop() {
}
