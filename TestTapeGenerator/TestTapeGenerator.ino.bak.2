

// *********************************************************************
//  Test software for Analyzer
// *********************************************************************

#include <ArduinoSTL.h>
using namespace std;
#include <LiquidCrystal_I2C.h>

class LCD_Helper
{
    std::string line[4];
  public:
    LiquidCrystal_I2C lcd;
    LCD_Helper(): lcd(0x25, 40, 2)
    {
      line[0] = "";
      line[1] = "";
      line[2] = "";
      line[3] = "";

      pinMode(8, OUTPUT);  // disp line select
      digitalWrite(8, HIGH);   // disp line
      lcd.init();              // initialize the LCD
      lcd.setBacklight(HIGH);  // SET LCD LYS ON / OFF
      lcd.clear();             // clear Display
    };
	SetLine(const char *c_str, int index) {
		if (index < 0 || index > 3) {
			return;
		}
		line[index] = c_str;
		if (line[index].size() > 40) {
			line[index].resize(40);
		}
	}
    Show()
    {
      digitalWrite(8, HIGH);
      lcd.setCursor(0, 0);
      lcd.print("1234567890123456789012345678901234567890");
      lcd.setCursor(0, 1);
      lcd.print("1234567890123456789012345678901234567890");

      digitalWrite(8, LOW);
      lcd.setCursor(0, 0);
      lcd.print("1234567890123456789012345678901234567890");
      lcd.setCursor(0, 1);
      lcd.print("1234567890123456789012345678901234567890");

      digitalWrite(8, HIGH);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(line[0].c_str());
      lcd.setCursor(0, 1);
      lcd.print(line[1].c_str());

      digitalWrite(8, LOW);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(line[2].c_str());
      lcd.setCursor(0, 1);
      lcd.print(line[3].c_str());
    };
};
/*
class RecordStep
{
  public:
    uint64_t Frequency;
    uint64_t Time;
    int64_t  Level;
    std::string Comment;
    RecordStep(uint64_t Frequency_, uint64_t Time_, int64_t Level_, const char* Comment_): Frequency(Frequency_), Time(Time_), Level(Level_), Comment(Comment_)
    {
    }
    RecordStep(uint64_t Frequency_, uint64_t Time_, int64_t Level_): Frequency(Frequency_), Time(Time_), Level(Level_), Comment(0)
    {
    }

    std::string ToString ()
    {
      char stringbuffer[40];
      sprintf(stringbuffer, "%5i Hz %4i dB %4i Sec", Frequency, Level, Time);
      return stringbuffer;
    }

};

class TapeInfo
{
  public:
    enum TapeFormat {Cassette = 'Cassette', Reel = 'Reel'};
    std::string Description;
    uint16_t Tracks;
    uint16_t Length;
    uint16_t Flux;
    TapeFormat Format;
    double Target;
    std::vector<RecordStep> RecordSteps;

    TapeInfo(
      std::string Description_,
      uint16_t Tracks_,
      uint16_t Flux_,
      TapeFormat Format_,
      double Target_,
      std::vector<RecordStep> RecordSteps_) : Description(Description_), Tracks(Tracks_), Flux(Flux_), Format(Format_), Target(Target_), RecordSteps(RecordSteps_)
    {
        std::vector<RecordStep>::iterator ptr;
        Length = 0;
        for (ptr = RecordSteps.begin(); ptr < RecordSteps.end(); ptr++) {
          Length += ptr->Time;
        }
    }

    std::vector<std::string> ToString ()
    {
      std::vector<std::string> Result(2);
      char stringbuffer[40];
      sprintf(stringbuffer, "%s", Description.c_str());
      Result[0] = stringbuffer;
      //sprintf(stringbuffer, "%i Track - %i Tracks - %i Min - %i nW/m - %s", Tracks, RecordSteps.size(), (Length % 60) ? Length / 60 + 1 : Length / 60, Flux, Format);
      sprintf(stringbuffer, "%i Track", Tracks);
      Result[1] = stringbuffer;
      return Result;
    }
};
*/
void splashscreen()
{
  LCD_Helper lcdhelper;

  lcdhelper.SetLine("         Test Tape Generator", 0);
  lcdhelper.SetLine("  SW rev: 2022/01/02", 1);
  lcdhelper.SetLine("TapeList: 2022/01/02", 2);
  lcdhelper.Show();
  delay(2000);
}

void selftest()
{
  LCD_Helper lcdhelper;

  lcdhelper.SetLine("I2C test: OK", 0);
  lcdhelper.Show();
  delay(750);

  lcdhelper.SetLine("RTC:OK EEPROM:OK ATT:OK DISP:OK", 1);
  lcdhelper.Show();
  delay(750);

  lcdhelper.SetLine("Frequncy response test:", 2);
  lcdhelper.SetLine("20Hz to 25Khz +/- 0.1 dB :OK", 3);
  lcdhelper.Show();
  delay(1000);
}
/*
std::vector<TapeInfo> TapeList = {
  ////////////////////////////////////////////////////////////////////////
        TapeInfo("Wow & Flutter Test Tape", 2, 257, TapeInfo::Reel, 0.0, {
            RecordStep(3000, 120, 0, 'DIN Standard'),
            RecordStep(3150, 120, 0, 'JIS Standard')}),

};
*/
void printTapeList()
{
  LCD_Helper lcdhelper;
/*
  char stringbuffer[40];
  sprintf(stringbuffer, "%s", TapeList[0].ToString()[0].c_str());
  lcdhelper.SetLine(stringbuffer, 0);
  //sprintf(stringbuffer, "%s", TapeList[0].ToString()[1].c_str());
  //lcdhelper.SetLine(stringbuffer, 1);
  lcdhelper.Show();
  delay(2000);
*/  
}
void setup() {
  Serial.begin(115200);

  splashscreen();
  selftest();
//  printTapeList();
}

void loop() {
}
